@attribute [Authorize]
@page "/"
@using BlazorApp31.Plugin
@using BlazorServerChat2.Hubs
@using Markdig;
@using Microsoft.AspNetCore.Identity
@using BlazorServerChat2.Areas.Identity
@using BlazorServerChat2.Data
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.RegularExpressions;
@using System.Text;
@using ConsoleApp15;
@using Microsoft.FluentUI.AspNetCore.Components
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@inject ApplicationDbContext DbContext
@inject ClientHub clientHub
@inject Room room
@inject HttpClient http
@inject SemanticKernelLogic semanticKernelLogic
@inject ScreenModePlugin screenModePlugin

<PageTitle>あびや</PageTitle>

<FluentLabel Typo="Typography.H1">あびやチャット</FluentLabel>
<hr />
@*
@if (!_isChatting)
{
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="@_username" />
    <button type="button" @onclick="Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    // banner to show current user*@
<div class="alert alert-secondary mt-4" role="alert">
    <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal" HorizontalGap="30">
        <FluentCounterBadge Count="Kingaku" Appearance="Appearance.Accent" Max="9000000">
            <FluentButton>
                <FluentIcon Value="@(new Icons.Regular.Size24.PersonChat())" Color="@Color.Accent" />
            </FluentButton>
        </FluentCounterBadge>
        <span>ログインユーザ： <b>@_username</b>さん</span>
        <FluentButton Appearance="Appearance.Neutral" OnClick="DisconnectAsync">退室</FluentButton>
    </FluentStack><br />
    <span><NavLink class="nav-link" href="log">これまでのお話し</NavLink> </span><br />
    <span>
        たぶん　@room.roomCount 人在室中
        @if (room.roomNames != null)
        {
            @foreach (var Item in room.roomNames)
            {
                <span>
                    @DbContext.Users.Find(Item) さん　
                </span>
            }
        }
    </span>
</div>
@*    // display messages*@
<div id="scrollbox">
    <div class="container">
        <div class="row">
            <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalAlignment="HorizontalAlignment.Left">
                <div class="col-9">
                    
                        <FluentTextField @ref="fluentTextField"
                                         AutoComplete="on"
                                         Id="ChatComment"
                                         Name="ChatComment"
                                         TextFieldType="TextFieldType.Text"
                                         style="width:95%;"
                                         Placeholder="コメント入力欄"
                                         Label="コメント入力"
                                         AriaLabel="ここにチャットで発言するコメントを入力してください"
                        @bind-Value="_newMessage">
                        </FluentTextField>&nbsp;
                    
                </div>
                <div class="col-3">
                    <FluentButton Appearance="Appearance.Accent" OnClick="@(s =>SendAsync(_newMessage))" aria-label="発言するときはこのボタンを押してください">発言</FluentButton>
                    <FluentButton @ref="honoka" Appearance="Appearance.Neutral" OnClick="@(s =>TalkGPT(_newMessage))">ほのかさんに話しかける</FluentButton>
                    <FluentButton Appearance="Appearance.Neutral" OnClick="NetaAsync">ネタをもらう</FluentButton>
                </div>
            </FluentStack>
        </div>
    </div>
    <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical" VerticalGap="40">
    @foreach (var item in clientHub._messages.OrderByDescending(x => x.PostTime))
    {
        @if (item.IsNotice)
        {
            @*<RadzenCard class="m-0" Style="background-color:#e1f7f4;">
    <div class="container ">
    <div class="row">
    <div class="col-12">@((MarkupString)item.Body)</div>

    </div>
    <div class="row">
    <div class="col-1">
    </div>
    <div class="col-11 fs-6">
    @item.PostTime.ToString()
    </div>
    </div>

    </div>
    </RadzenCard>
    *@
                <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal">
                <FluentGrid>
                    <FluentGridItem lg="3" md="3" sm="3" xl="3" xs="3" xxl="3">
                            <FluentEmoji Value="@(new Emojis.Objects.Color.Default.BlackNib())" Width="64px" />
                    </FluentGridItem>
                    <FluentGridItem lg="8" md="8" sm="8" xl="8" xs="8" xxl="8">
                            <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Left">

                            <FluentLabel Typo="Typography.Body">@((MarkupString)item.Body)</FluentLabel>
                                <FluentLabel Typo="Typography.Body">@item.PostTime.ToString()</FluentLabel>
                            </FluentStack>

                        </FluentGridItem>
                    </FluentGrid>
                </FluentStack>
                <FluentDivider Role="DividerRole.Presentation" />
        }
        else
        {
            @if (@item.Mine)
            {
                @*<RadzenCard class="m-0" Style="background-color:#daebf4;">
    <div class="container">
    <div class="row">
    @if (@DbContext.UserChatSetting.Where(x => x.Id == @item.UserId)?.Select(x => x.IconNumber).FirstOrDefault() != 0)
    {
    <div class="col-1"><img src="data:image/png;base64,@Convert.ToBase64String(@DbContext.IconMaster.Where(x => x.IconNumber == @DbContext.UserChatSetting.Where(x => x.Id == @item.UserId).Select(x => x.IconNumber).FirstOrDefault()).Select(x => x.Icon).FirstOrDefault()!)" /></div>
    }
    else
    {
    <div class="col-1"></div>
    }
    <div class="col-11">
    <div class="row">
    <div class="col-2 fs-5" style="text-align:right;">@item.Username :</div>
    <div class="col-9 fs-5" style="color:@DbContext.UserChatSetting.Where(x=> x.Id == @item.UserId).Select(x => x.BackGroundColor).FirstOrDefault()">@item.Body</div>


    <div class="row">

    <div class="col-11 fs-6">
    @item.PostTime.ToString()
    </div>
    </div>
    </div>
    </div>
    </div>
    </div>
    </RadzenCard>
    *@
                    <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal"
                             VerticalAlignment="VerticalAlignment.Center"
                             HorizontalAlignment="HorizontalAlignment.Center">
                    <FluentGrid>
                        <FluentGridItem lg="3" md="3" sm="3" xl="3" xs="3" xxl="3">
                            </FluentGridItem>
                        <FluentGridItem lg="8" md="8" sm="8" xl="8" xs="8" xxl="8">
                                <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Left">

                                <FluentLabel Typo="Typography.Body" Color="Color.Accent">
                                        @*<div style="color:@DbContext.UserChatSetting.Where(x=> x.Id == @item.UserId).Select(x => x.BackGroundColor).FirstOrDefault()">*@@item.Body
                                        @*</div>*@
                                </FluentLabel>
                                <FluentLabel Typo="Typography.Body">@item.PostTime.ToString()</FluentLabel>
                            </FluentStack>

                        </FluentGridItem>

                        <FluentGridItem lg="1" md="1" sm="1" xl="1" xs="1" xxl="1">
                            <FluentStack VerticalAlignment="VerticalAlignment.Center" HorizontalAlignment="HorizontalAlignment.Center">
                                <div>
                                    @if (@DbContext.UserChatSetting.Where(x => x.Id == @item.UserId).Select(x => x.IconNumber).FirstOrDefault() != 0)
                                    {
                                        <img src="data:image/png;base64,@Convert.ToBase64String(@DbContext.IconMaster.Where(x => x.IconNumber == @DbContext.UserChatSetting.Where(x => x.Id == @item.UserId).Select(x => x.IconNumber).FirstOrDefault()).Select(x => x.Icon).FirstOrDefault()!)" />
                                    }
                                    else
                                    {

                                    }
                                </div>
                            </FluentStack>
                        </FluentGridItem>
                    </FluentGrid>
                </FluentStack>
                    <FluentDivider Role="DividerRole.Presentation" />

            }
            else
            {
                @*<RadzenCard class="m-0" Style="background-color:white;">
    <div class="container">
    <div class="row">
    @if (@DbContext.UserChatSetting.Where(x => x.Id == @item.UserId).Select(x => x.IconNumber).FirstOrDefault() != 0)
    {
    <div class="col-1"><img src="data:image/png;base64,@Convert.ToBase64String(@DbContext.IconMaster.Where(x => x.IconNumber == @DbContext.UserChatSetting.Where(x => x.Id == @item.UserId).Select(x => x.IconNumber).FirstOrDefault()).Select(x => x.Icon).FirstOrDefault()!)" /></div>
    }
    else
    {
    <div class="col-1"></div>
    }
    <div class="col-11">
    <div class="row">
    <div class="col-2 fs-5" style="text-align:right;">@item.Username :</div>
    <div class="col-9 fs-5" style="color:@DbContext.UserChatSetting.Where(x=> x.Id == @item.UserId).Select(x => x.BackGroundColor).FirstOrDefault()">@item.Body</div>


    <div class="row">

    <div class="col-11 fs-6">
    @item.PostTime.ToString()
    </div>
    </div>
    </div>
    </div>
    </div>
    </div>
    </RadzenCard>
    *@
                    <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalAlignment="HorizontalAlignment.Center">
                            <FluentGrid>
                                <FluentGridItem lg="1" md="1" sm="1" xl="1" xs="1" xxl="1">
                                    <FluentStack VerticalAlignment="VerticalAlignment.Center" HorizontalAlignment="HorizontalAlignment.Center">
                                        <div>
                                            @if (@DbContext.UserChatSetting.Where(x => x.Id == @item.UserId).Select(x => x.IconNumber).FirstOrDefault() != 0)
                                            {
                                                <img src="data:image/png;base64,@Convert.ToBase64String(@DbContext.IconMaster.Where(x => x.IconNumber == @DbContext.UserChatSetting.Where(x => x.Id == @item.UserId).Select(x => x.IconNumber).FirstOrDefault()).Select(x => x.Icon).FirstOrDefault()!)" />
                                            }
                                            else
                                            {

                                            }
                                        </div>
                                    </FluentStack>
                                </FluentGridItem>
                                <FluentGridItem lg="8" md="8" sm="8" xl="8" xs="8" xxl="8">
                                <FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Left">

                                        <FluentLabel Typo="Typography.Body">
                                            @item.Username :
                                        @*<div style="color:@DbContext.UserChatSetting.Where(x=> x.Id == @item.UserId).Select(x => x.BackGroundColor).FirstOrDefault()">*@@item.Body
                                        @*</div>*@
                                        </FluentLabel>
                                        <FluentLabel Typo="Typography.Body">@item.PostTime.ToString()</FluentLabel>
                                    </FluentStack>

                                </FluentGridItem>
                            </FluentGrid>
                        </FluentStack>
                    <FluentDivider Role="DividerRole.Presentation" />
            }
        }
    }
    </FluentStack>
    <hr />
</div>
@*}
*@
@code {
    private string user = string.Empty;
    // flag to indicate chat status
    private bool _isChatting = false;

    // name of the user who will be chatting
    private string _username = string.Empty;

    // on-screen message
    private string _message = string.Empty;

    // new message input
    private string _newMessage = string.Empty;

    public string UserId = string.Empty;

    public IEnumerable<string>? RoomUserName;

    private FluentButton? honoka;
    private FluentTextField? fluentTextField;
    private int Kingaku = 0;

    Regex regex = new Regex(@"^[\w/\:.-]+;base64,");
    //public string huburi;
    // list of messages in chat
    //private List<Message> _messages = new List<Message>();

    //private string _hubUrl;
    public void Dispose()
    {
        //clientHub.OnChange -= StateHasChanged;
    }


    public void OnCallBack()
    {
        _ = InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    /// <summary>
    /// 初期表示
    /// DBから過去ログを取得してメッセージリストに入れておく
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState!.User.Identity?.Name!;
        UserId = authState.User.Claims.Where(x => x.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier").Select(x => x.Value).FirstOrDefault()!;
        _username = user;

        //clientHub.OnChange += StateHasChanged;
        clientHub.OnChange += () => OnCallBack();
        // ここには落ちない想定
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        }

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            clientHub._messages.Clear();

            var context = DbContext.Chats.OrderByDescending(x => x.Time).Take(100);

            foreach (Chat chat in context)
            {
                bool isMine = chat.Name.Equals(_username, StringComparison.OrdinalIgnoreCase);
                Message message = new Message(chat.Name, chat.Message, isMine, chat.UserId);
                message.PostTime = chat.Time;
                message.UserId = chat.UserId;
                clientHub._messages.Add(message);
            }

            var osaifu = DbContext.Osaifus.Find(_username);
            if (osaifu != null)
            {
                Kingaku = osaifu.Kingaku;
            }

        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }

    }


    /// <summary>
    /// SignalRハブに接続処理
    /// 入室メッセージ送信
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        await clientHub.InitIndexPage();
    }

    /// <summary>
    /// SignalRハブから呼び出されるメソッド
    /// メッセージリストにメッセージ追加
    /// </summary>
    /// <param name="name">送信元名前</param>
    /// <param name="message">メッセージ</param>
    private void BroadcastMessage(string name, Message message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        clientHub._messages.Add(new Message(name, message.Body, isMine, message.UserId));


        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    /// <summary>
    /// SignalRハブ切断処理を呼び出す
    /// </summary>
    /// <returns></returns>
    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[ほのか] {_username} さんいってらっしゃい", true);
            room.LeaveRoom(UserId);
            //await _hubConnection.StopAsync();
            //await _hubConnection.DisposeAsync();
            await clientHub.DisconnectAsync();

            //_hubConnection = null;
            _isChatting = false;
        }
        navigationManager.NavigateTo("./Exit");
    }

    /// <summary>
    /// ネタ帳からネタをランダムで振る
    /// </summary>
    /// <returns></returns>
    private async Task NetaAsync()
    {
        Chat chat = new Chat();
        chat.Name = _username ?? string.Empty;
        chat.Message = $"[ほのか] : {_username}さん{DbContext.NetaMastar.ToList().RandomElementAt().Neta}";
        chat.UserId = UserId ?? string.Empty;
        DbContext.Chats.Add(chat);
        DbContext.SaveChanges();
        semanticKernelLogic.NonGenerateMessage(chat.Message);
        Message message1 = new Message(_username ?? string.Empty, chat.Message, false, UserId ?? string.Empty);

        await clientHub.SendAsync(message1);
        room.SendMsg(UserId ?? string.Empty);
        _newMessage = string.Empty;
        StateHasChanged();
    }

    /// <summary>
    /// GPTChatに送信
    /// </summary>
    /// <param name="message"></param>
    /// <returns></returns>
    private async Task<string> SendGptChat(string message)
    {
        HttpRequestMessage requestMessage = new HttpRequestMessage();
        requestMessage.Method = HttpMethod.Post;
        requestMessage.Headers.TryAddWithoutValidation("Content-Type", "application/json");
        requestMessage.Headers.Add("api-key", Program.GptKey);

        requestMessage.RequestUri = new Uri(Program.GptUrl!);

        string json =
                                            $$""""
                    {
                      "messages": [{"role":"system","content":"Context: - 私の名前はほのかです。"},
                       {"role":"user","content":"{{message}}"}],
                      "temperature": 1,
                      "top_p": 0.5,
                      "frequency_penalty": 0,
                      "presence_penalty": 0,
                      "max_tokens": 2000,
                      "stop": null
                    }
                   """";
        byte[] bytes = Encoding.UTF8.GetBytes(json);

        HttpContent content = new ByteArrayContent(bytes);
        requestMessage.Content = content;
        var res = http.Send(requestMessage);
        var body = await res.Content.ReadAsStringAsync();
        var data = System.Text.Json.JsonSerializer.Deserialize<Response>(body);
        var pipiline = new MarkdownPipelineBuilder().UseAdvancedExtensions().UseBootstrap().UseAutoLinks().Build();
        string Response = Markdown.ToHtml(data!.choices[0].message.content, pipiline);

        return Response;

    }

    private async Task TalkGPT(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            Chat chat = new Chat();
            chat.Name = _username ?? string.Empty;
            chat.Message = message;
            chat.UserId = UserId ?? string.Empty;
            Osaifu osaifu1 = new();
            DbContext.Chats.Add(chat);
            var osaifu = DbContext.Osaifus.Find(_username);
            if (osaifu != null)
            {
                osaifu.Kingaku = osaifu.Kingaku + 100;
                Kingaku = osaifu.Kingaku;
            }
            else
            {
                osaifu1.Kingaku = 100;
                osaifu1.Name = _username;
                DbContext.Add(osaifu1);
                Kingaku = 100;
            }
            DbContext.SaveChanges();
            Message message1 = new Message(_username ?? string.Empty, message, true, UserId ?? string.Empty);

            await clientHub.SendAsync(message1);
            room.SendMsg(UserId ?? string.Empty);
            _newMessage = string.Empty;
            StateHasChanged();
            //string response = await SendGptChat(message);
            string response = await semanticKernelLogic.Run(message);
            chat = new();
            chat.Name = _username ?? string.Empty;
            chat.Message = $"[ほのか] : {_username}さん{response}";
            chat.UserId = UserId ?? string.Empty;
            DbContext.Chats.Add(chat);
            DbContext.SaveChanges();
            Message message2 = new Message(_username ?? string.Empty, chat.Message, false, UserId ?? string.Empty);

            await clientHub.SendAsync(message2);
            room.SendMsg(UserId ?? string.Empty);
            _newMessage = string.Empty;

            StateHasChanged();

        }

    }

    /// <summary>
    /// メッセージ送信
    /// ここではメッセージ内容をつくりメッセージ送信そのものはクライアント接続管理クラスにて行う
    /// </summary>
    /// <param name="message">発言内容</param>
    /// <returns></returns>
    private async Task SendAsync(string message, bool IsSystem = false)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            if (message.StartsWith("[ほのか]") && !IsSystem)
            {
                return;
            }
            Chat chat = new Chat();
            chat.Name = _username ?? string.Empty;
            chat.Message = message;
            chat.UserId = UserId ?? string.Empty;
            Osaifu osaifu1 = new();
            DbContext.Chats.Add(chat);
            semanticKernelLogic.NonGenerateMessage(message);
            var osaifu = DbContext.Osaifus.Find(_username);
            if (osaifu != null)
            {
                osaifu.Kingaku = osaifu.Kingaku + 100;
                Kingaku = osaifu.Kingaku;
            }
            else
            {
                osaifu1.Kingaku = 100;
                osaifu1.Name = _username;
                DbContext.Add(osaifu1);
                Kingaku = 100;
            }
            DbContext.SaveChanges();
            Message message1 = new Message(_username ?? string.Empty, message, true, UserId ?? string.Empty);

            await clientHub.SendAsync(message1);
            room.SendMsg(UserId ?? string.Empty);
            _newMessage = string.Empty;
            StateHasChanged();
        }
    }

    /// <summary>
    /// メッセージ
    /// </summary>
    public class Message
    {
        public Message(string username, string body, bool mine, string userid)
        {
            Username = username;
            Body = body;
            Mine = mine;
            UserId = userid;
        }

        /// <summary>
        /// メッセージ送信元ユーザ名
        /// </summary>
        public string Username { get; set; }
        /// <summary>
        /// メッセージ本体
        /// </summary>
        public string Body { get; set; }
        /// <summary>
        /// 自分の送信したメッセージかどうか
        /// </summary>
        public bool Mine { get; set; }
        public int ConnectionCount { get; set; }
        /// <summary>
        /// メッセージ送信日時
        /// </summary>
        public DateTime PostTime { get; set; } = DateTime.Now;
        /// <summary>
        /// メッセージ送信元ユーザID
        /// </summary>
        public string UserId { get; set; } = String.Empty;
        /// <summary>
        /// 管理人発言かどうか
        /// </summary>
        public bool IsNotice => Body.StartsWith("[ほのか]");

        public string CSS => Mine ? "sent" : "received";
    }

}