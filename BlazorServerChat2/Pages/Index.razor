@attribute [Authorize]
@page "/"
@using BlazorServerChat2.Hubs
@using Microsoft.AspNetCore.Identity
@using BlazorServerChat2.Areas.Identity
@using BlazorServerChat2.Data
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@inject ApplicationDbContext DbContext
@inject ClientHub clientHub
@inject Room room

<PageTitle>あびや</PageTitle>

<h1>あびやチャット</h1>
<hr />
@*
@if (!_isChatting)
{
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="@_username" />
    <button type="button" @onclick="Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    // banner to show current user*@
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>ログインユーザ： <b>@_username</b>さん</span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="DisconnectAsync">退室</button><br />
        <span><NavLink class="nav-link" href="log">これまでのお話し</NavLink> </span><br />
        <span>たぶん　@room.roomCount 人在室中 </span>
    </div>
@*    // display messages*@
    <div id="scrollbox">
        <div class="container">
            <div class="row">
                <div class="col-9">
                    <textarea style="width:95%;" placeholder="コメント入力欄" @bind="@_newMessage"></textarea>&nbsp;
                </div>
                <div class="col-3">
                    <button class="btn btn-primary" @onclick="@(s =>SendAsync(_newMessage))">発言</button>
                    <button class="btn btn-primary" @onclick="NetaAsync">ネタをもらう</button>
                </div>
            </div>
        </div>
        @foreach (var item in clientHub._messages.OrderByDescending(x => x.PostTime))
        {
            @if (item.IsNotice)
            {
                <RadzenCard class="m-0" Style="background-color:#e1f7f4;">
                    <div class="container ">
                        <div class="row">
                            <div class="col-12">@item.Body</div>

                        </div>
                        <div class="row">
                            <div class="col-1">
                            </div>
                            <div class="col-11 fs-6">
                                @item.PostTime.ToString()
                            </div>
                        </div>

                    </div>
                </RadzenCard>

            }
            else
            {
                @if (@item.Mine)
                {
                    <RadzenCard class="m-0" Style="background-color:#daebf4;">
                        <div class="container">
                            <div class="row">
                                @if (@DbContext.UserChatSetting.Where(x => x.Id == @item.UserId).Select(x => x.IconNumber).FirstOrDefault() != 0)
                                {
                                    <div class="col-1"><img src="data:image/png;base64,@Convert.ToBase64String(@DbContext.IconMaster.Where(x => x.IconNumber == @DbContext.UserChatSetting.Where(x => x.Id == @item.UserId).Select(x => x.IconNumber).FirstOrDefault()).Select(x => x.Icon).FirstOrDefault())" /></div>
                                }
                                else
                                {
                                    <div class="col-1"></div>
                                }
                                <div class="col-11">
                                <div class="row">
                                    <div class="col-2 fs-5" style="text-align:right;">@item.Username :</div>
                                    <div class="col-9 fs-5" style="color:@DbContext.UserChatSetting.Where(x=> x.Id == @item.UserId).Select(x => x.BackGroundColor).FirstOrDefault()">@item.Body</div>

                                
                                <div class="row">
                                    
                                    <div class="col-11 fs-6">
                                        @item.PostTime.ToString()
                                    </div>
                                </div>
                                </div>
                                </div>
                            </div>
                        </div>
                    </RadzenCard>
                }
                else
                {
                    <RadzenCard class="m-0" Style="background-color:white;">
                        <div class="container">
                            <div class="row">
                                @if (@DbContext.UserChatSetting.Where(x => x.Id == @item.UserId).Select(x => x.IconNumber).FirstOrDefault() != 0)
                                {
                                    <div class="col-1"><img src="data:image/png;base64,@Convert.ToBase64String(@DbContext.IconMaster.Where(x => x.IconNumber == @DbContext.UserChatSetting.Where(x => x.Id == @item.UserId).Select(x => x.IconNumber).FirstOrDefault()).Select(x => x.Icon).FirstOrDefault())" /></div>
                                }
                                else
                                {
                                    <div class="col-1"></div>
                                }
                                <div class="col-11">
                                <div class="row">
                                    <div class="col-2 fs-5" style="text-align:right;">@item.Username :</div>
                                    <div class="col-9 fs-5" style="color:@DbContext.UserChatSetting.Where(x=> x.Id == @item.UserId).Select(x => x.BackGroundColor).FirstOrDefault()">@item.Body</div>

                                
                                <div class="row">
                                    
                                    <div class="col-11 fs-6">
                                        @item.PostTime.ToString()
                                    </div>
                                </div>
                                </div>
                                </div>
                            </div>
                        </div>
                    </RadzenCard>

                }
            }
        }
        <hr />
    </div>
@*}
*@
@code {
    private string user = string.Empty;
    // flag to indicate chat status
    private bool _isChatting = false;

    // name of the user who will be chatting
    private string _username;

    // on-screen message
    private string _message;

    // new message input
    private string _newMessage;

    public string UserId;
    //public string huburi;
    // list of messages in chat
    //private List<Message> _messages = new List<Message>();

    //private string _hubUrl;

    /// <summary>
    /// 初期表示
    /// DBから過去ログを取得してメッセージリストに入れておく
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User.Identity?.Name;
        UserId = authState.User.Claims.Where(x => x.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier").Select(x => x.Value).FirstOrDefault();
        _username = user;
        clientHub.OnChange += StateHasChanged;

        // ここには落ちない想定
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        }

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            clientHub._messages.Clear();

            var context = DbContext.Chats.OrderByDescending(x => x.Time).Take(100);

            foreach (Chat chat in context)
            {
                bool isMine = chat.Name.Equals(_username, StringComparison.OrdinalIgnoreCase);
                Message message = new Message(chat.Name, chat.Message, isMine, chat.UserId);
                message.PostTime = chat.Time;
                message.UserId = chat.UserId;
                clientHub._messages.Add(message);
            }


        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }

    }

    /// <summary>
    /// SignalRハブに接続処理
    /// 入室メッセージ送信
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await clientHub.InitIndexPage();
        //room.OnChange += StateHasChanged;

    }

    /// <summary>
    /// SignalRハブから呼び出されるメソッド
    /// メッセージリストにメッセージ追加
    /// </summary>
    /// <param name="name">送信元名前</param>
    /// <param name="message">メッセージ</param>
    private void BroadcastMessage(string name, Message message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        clientHub._messages.Add(new Message(name, message.Body, isMine, message.UserId));

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    /// <summary>
    /// SignalRハブ切断処理を呼び出す
    /// </summary>
    /// <returns></returns>
    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[ほのか] {_username} さんいってらっしゃい");
            room.LeaveRoom(UserId);
            //await _hubConnection.StopAsync();
            //await _hubConnection.DisposeAsync();
            await clientHub.DisconnectAsync();

            //_hubConnection = null;
            _isChatting = false;
        }
        navigationManager.NavigateTo("./Exit");
    }

    /// <summary>
    /// ネタ帳からネタをランダムで振る
    /// </summary>
    /// <returns></returns>
    private async Task NetaAsync ()
    {
        Chat chat = new Chat();
        chat.Name = _username ?? string.Empty;
        chat.Message = $"[ほのか] : {_username}さん{DbContext.NetaMastar.ToList().RandomElementAt().Neta}";
        chat.UserId = UserId ?? string.Empty;
        DbContext.Chats.Add(chat);
        DbContext.SaveChanges();
        Message message1 = new Message(_username, chat.Message, false, UserId);

        await clientHub.SendAsync( message1);

        _newMessage = string.Empty;

    }

    /// <summary>
    /// メッセージ送信
    /// ここではメッセージ内容をつくりメッセージ送信そのものはクライアント接続管理クラスにて行う
    /// </summary>
    /// <param name="message">発言内容</param>
    /// <returns></returns>
    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            Chat chat = new Chat();
            chat.Name = _username ?? string.Empty;
            chat.Message = message;
            chat.UserId = UserId ?? string.Empty;
            DbContext.Chats.Add(chat);
            DbContext.SaveChanges();
            Message message1 = new Message(_username, message, true, UserId);

            await clientHub.SendAsync(message1);
            room.SendMsg(UserId);
            _newMessage = string.Empty;
            StateHasChanged();
        }
    }

    /// <summary>
    /// メッセージ
    /// </summary>
    public class Message
    {
        public Message(string username, string body, bool mine, string userid)
        {
            Username = username;
            Body = body;
            Mine = mine;
            UserId = userid;
        }

        /// <summary>
        /// メッセージ送信元ユーザ名
        /// </summary>
        public string Username { get; set; }
        /// <summary>
        /// メッセージ本体
        /// </summary>
        public string Body { get; set; }
        /// <summary>
        /// 自分の送信したメッセージかどうか
        /// </summary>
        public bool Mine { get; set; }
        public int ConnectionCount { get; set; }
        /// <summary>
        /// メッセージ送信日時
        /// </summary>
        public DateTime PostTime { get; set; } = DateTime.Now;
        /// <summary>
        /// メッセージ送信元ユーザID
        /// </summary>
        public string UserId { get; set; } = String.Empty;
        /// <summary>
        /// 管理人発言かどうか
        /// </summary>
        public bool IsNotice => Body.StartsWith("[ほのか]");

        public string CSS => Mine ? "sent" : "received";
    }

}